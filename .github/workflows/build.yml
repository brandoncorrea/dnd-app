name: Run Build

on:
  push:
    branches:
      - master
      - production

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache Clojure Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-deps-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Clojure CLI
        run: curl -O https://download.clojure.org/install/linux-install-1.11.1.1119.sh && chmod +x linux-install-1.11.1.1119.sh && sudo ./linux-install-1.11.1.1119.sh

      - name: Run ClojureScript Tests
        run: ME_ENV=ci clojure -M:test:cljs once

      - name: Run Clojure Tests
        run: clojure -M:test:spec

  deploy:
    runs-on: ubuntu-latest
    needs: test
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'stage' }}

    concurrency:
      group: deploy-ec2-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get old instance IDs
        id: get_old_instance_id
        run: |
          OLD_INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:app,Values=dnd" "Name=tag:env,Values=${{ secrets.ME_ENV }}" "Name=instance-state-name,Values=pending,running,shutting-down,stopping,stopped" \
            --query 'Reservations[*].Instances[*].InstanceId' \
            --output text | tr '\n' ' ')
          echo "OLD_INSTANCE_IDS=$OLD_INSTANCE_IDS" >> $GITHUB_ENV

      - name: Deploy new EC2 instance
        id: deploy_new_instance
        run: |
          # Ubuntu 24.04 Base Image
          IMAGE_ID=ami-04a81a99f5ec58529

          NEW_INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $IMAGE_ID \
            --count 1 \
            --instance-type t2.small \
            --key-name ${{ secrets.SSH_PRIVATE_KEY_NAME }} \
            --security-group-ids ${{ secrets.SECURITY_GROUP_IDS }} \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=app,Value=dnd},{Key=env,Value=${{ secrets.ME_ENV }}}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "NEW_INSTANCE_ID=$NEW_INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for Instance to Start
        run: |
          aws ec2 wait instance-running --instance-ids ${{ env.NEW_INSTANCE_ID }}
          aws ec2 wait instance-status-ok --instance-ids ${{ env.NEW_INSTANCE_ID }}

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Prep SSH
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ env.NEW_INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          ssh-keyscan -H $PUBLIC_IP >> ~/.ssh/known_hosts

      - name: Install Service
        run: |
          ssh -T ${{ secrets.USER }}@${{ env.PUBLIC_IP }} << 'EOF'
            git clone "${{ github.server_url }}/${{ github.repository }}" dnd
            cd dnd

            ./bin/prep
          
            echo "Installing SSL"
            sudo echo "${{ secrets.SSL_CERTIFICATE }}" | sudo tee -a /etc/ssl/bwawan.com.crt > /dev/null
            sudo echo "${{ secrets.SSL_PRIVATE_KEY }}" | sudo tee -a /etc/ssl/bwawan.com.key > /dev/null

            echo "Installing Secrets"
            echo "ME_ENV=${{ secrets.ME_ENV }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "HOST=${{ secrets.HOST }}" >> .env

            clojure -M:test:cljs once
            clojure -M:test:css once
            clojure -M:test:install
          EOF

      - name: Wait for instance to be ready
        run: |
          MAX_WAIT_TIME=600
          SLEEP_TIME=1
          WAIT_TIME=0
          until curl --insecure -s -o /dev/null -w "%{http_code}" https://${{ env.PUBLIC_IP }} | grep -q "200"; do
            WAIT_TIME=$((WAIT_TIME + SLEEP_TIME))
            if [ $WAIT_TIME -ge $MAX_WAIT_TIME ]; then
              echo "Timed out waiting for instance to be ready."
              exit 1
            fi
            echo "Waiting for instance to be ready..."
            sleep $SLEEP_TIME
          done
          echo "Instance is ready."

      - name: Allocate Elastic IP Address
        run: |
          ALLOCATION_ID=$(aws ec2 describe-addresses \
            --filters "Name=tag:app,Values=dnd" "Name=tag:env,Values=${{ secrets.ME_ENV }}" \
            --query 'Addresses[0].AllocationId' \
            --output text)
          aws ec2 associate-address --instance-id ${{ env.NEW_INSTANCE_ID }} --allocation-id $ALLOCATION_ID

      - name: Delete old instances if they exist
        if: env.OLD_INSTANCE_IDS != ''
        run: aws ec2 terminate-instances --instance-ids ${{ env.OLD_INSTANCE_IDS }}

      - name: Cleanup new instance if job fails
        if: failure() && env.NEW_INSTANCE_ID != ''
        run: aws ec2 terminate-instances --instance-ids ${{ env.NEW_INSTANCE_ID }}
